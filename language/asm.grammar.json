{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "6502 Assembler Language Grammar",
	"patterns": [
		{
			"include": "#generic"
		},
		{
			"include": "#acme"
		},
		{
			"include": "#llvm"
		},
		{
			"include": "#kick"
		}
	],

	"repository": {

		"generic": {
			"patterns": [
				{
					"include": "#generic-comments"
				},
				{
					"include": "#generic-strings"
				},
				{
					"include": "#generic-numbers"
				},
				{
					"include": "#generic-labels"
				},
				{
					"include": "#generic-opcodes"
				},
				{
					"include": "#generic-directives"
				}
			]
		},

		"generic-comments": {
			"patterns": [
				{
					"name": "comment.line.semicolon",
					"begin": ";",
					"end": "$",
					"comment": "Single line comment"
				},
				{
					"name": "comment.line.double-slash",
					"begin": "//",
					"end": "$",
					"comment": "Single line comment"
				},
				{
					"name": "comment.block",
					"begin": "/\\*",
					"end": "\\*/",
					"comment": "Block comment"
				}
			]
		},

		"generic-strings": {
			"name": "string.quoted.double.asm",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.asm",
					"match": "\\\\."
				}
			]
		},

		"generic-numbers": {
			"patterns": [
				{
					"match": "#?\\$[0-9a-fA-F]+\\b",
					"name": "constant.numeric.hex"
				},
				{
					"match": "#?\\%[0-1]+\\b",
					"name": "constant.numeric.bin"
				},
				{
					"match": "#?[0-9]+\\b",
					"name": "constant.numeric.dec"
				},
				{
					"match": "#?\\&[0-7]+\\b",
					"name": "constant.numeric.oct"
				}
			]
		},

		"generic-labels": {
			"patterns": [
				{
					"name": "emphasis",
					"match": "\\b(\\w+)\\:"
				}
			]
		},

		"generic-opcodes": {
			"patterns": [
				{
					"include": "#generic-opcodes-instructions"
				},
				{
					"include": "#generic-opcodes-control"
				},
				{
					"include": "#generic-opcodes-illegal"
				},
				{
					"include": "#generic-opcodes-65c02"
				}
			]
		},
		"generic-opcodes-instructions": {
			"patterns": [
				{
					"name": "keyword.instructions",
					"match": "(?i)[\\s]*\\b(adc|and|asl|bit|clc|cld|cli|clv|cmp|cpx|cpy|dec|dex|dey|eor|inc|inx|iny|lda|ldx|ldy|lsr|nop|ora|pha|php|pla|plp|rol|ror|sbc|sec|sed|sei|sta|stx|sty|tax|txa|tay|tya|tsx|txs)\\b"
				}
			]
		},
		"generic-opcodes-control": {
			"patterns": [
				{
					"name": "keyword.control",
					"match": "(?i)[\\s]*\\b(bcc|bcs|beq|bmi|bne|bpl|brk|bvc|bvs|jmp|jsr|rti|rts)\\b"
				}
			]
		},
		"generic-opcodes-illegal": {
			"patterns": [
				{
					"name": "keyword.illegal",
					"match": "(?i)[\\s]*\\b(slo|rla|sre|rra|sax|lax|dcp|isc|anc|asr|arr|sbx|dop|top|jam)\\b"
				}
			]
		},
		"generic-opcodes-65c02": {
			"patterns": [
				{
					"name": "keyword.instructions",
                    "match": "(?i)[\\s]*\\b((bbr|bbs|rmb|smb)[0-7]|trb|tsb|phx|phy|plx|ply|stz)\\b"
				},
				{
					"name": "keyword.control",
					"match": "(?i)[\\s]*\\b(bra)\\b"
				}
			]
		},
		"generic-directives": {
			"patterns": [
				{
					"include": "#generic-directives-pc"
				}
            ]
		},
		"generic-directives-pc": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.instructions"
						}
					},
					"match": "(\\*=)"
				}
			]
		},

		"acme": {
			"patterns": [
				{
					"include": "#acme-preprocessor"
				},
				{
					"include": "#acme-directives"
				}
			]
		},

		"acme-preprocessor": {
			"patterns": [
				{
					"include": "#acme-preprocessor-keywords"
				},
				{
					"include": "#acme-preprocessor-flow-control"
				},
				{
					"include": "#acme-preprocessor-io"
				}
            ]
		},
		"acme-preprocessor-keywords": {
			"patterns": [
				{
					"name": "meta.preprocessor",
					"match": "\\!(cpu|al|as|rl|rs)\\b"
				}
			]
		},
		"acme-preprocessor-flow-control": {
			"patterns": [
				{
					"name": "meta.diff.header",
					"match": "\\!(if|ifdef|for|do|warn|error|serious|endoffile|pseudopc)\\b"
				}
			]
		},
		"acme-preprocessor-io": {
			"patterns": [
				{
					"name": "meta.preprocessor.io",
					"match": "\\!(binary|bin)\\b"
				},
				{
					"captures": {
						"1": {
							"name": "meta.preprocessor.io.output"
						},
						"2": {
							"name": "string.quoted.double.untitled"
						},
						"3": {
							"name": "meta.preprocessor.io.format"
						}
					},
					"match": "(\\!to)\\s*(\\\"[^\"]+\\\")\\s*,\\s*([a-zA-Z]+)"
				},
				{
					"captures": {
						"1": {
							"name": "meta.preprocessor.io.input"
						},
						"2": {
							"name": "string.quoted.double.library.name"
						}
					},
					"match": "(\\!source|\\!src)\\s*([\\\"<][^\\\">]+[\\\">])"
				}
			]
		},

		"acme-directives": {
			"patterns": [
				{
					"include": "#acme-directives-macro-declaration"
				},
				{
					"include": "#acme-directives-macro-call"
				},
				{
					"include": "#acme-directives-scope-declaration"
				},
				{
					"include": "#acme-directives-data"
				},
				{
					"include": "#acme-directives-text"
				}
            ]
		},
		"acme-directives-macro-declaration": {
			"patterns": [
				{
					"name": "entity.name.function.macro",
					"match": "\\!(macro)\\b"
				}
			]
		},
		"acme-directives-macro-call": {
			"patterns": [
				{
					"name": "entity.name.function.macro",
					"match": "\\+(\\w+)\\b"
				}
			]
		},
		"acme-directives-scope-declaration": {
			"patterns": [
				{
					"name": "meta.preprocessor",
					"match": "\\!(addr|set|zone)\\b"
				}
			]
		},
		"acme-directives-data": {
			"patterns": [
				{
					"name": "keyword.instructions",
					"match": "\\!(?i)[\\s]*\\b(8|08|by|byte|16|24|32|wo|word|align|fill|fi|hex|h|skip)\\b"
				}
			]
		},
		"acme-directives-text": {
			"patterns": [
				{
					"name": "keyword.instructions",
					"match": "\\!(?i)[\\s]*\\b(ct|convtab|pet|raw|scr|scrxor|tx|text|Text)\\b"
				}
			]
		},

		"kick": {
			"patterns": [
				{
					"include": "#kick-preprocessor"
				},
				{
					"include": "#kick-directives"
				}
			]
		},

		"kick-preprocessor": {
			"patterns": [
				{
					"name": "meta.preprocessor",
					"match": "#(define|elif|else|endif|if|import|importif|importonce|undef)\\b"
				}
			]
		},

		"kick-directives": {
			"patterns": [
				{
					"include": "#kick-directives-flow-control"
				},
				{
					"include": "#kick-directives-asm-control"
				},
				{
					"include": "#kick-directives-data"
				},
				{
					"include": "#kick-directives-text"
				}
            ]
		},
		"kick-directives-flow-control": {
			"patterns": [
				{
					"name": "keyword.instructions",
					"match": "\\.(?i)[\\s]*\\b(for|if|while|return)\\b"
				}
			]
		},
		"kick-directives-asm-control": {
			"patterns": [
				{
					"name": "keyword.instructions",
					"match": "\\.(?i)[\\s]*\\b(align|assert|asserterror|break|cpu|define|disk|encoding|error|errorif|eval|file|filemodify|filenamespace|function|import|importonce|label|lohifill|macro|memblock|modify|namespace|pc|plugin|print|printnow|pseudocommand|pseudopc|segment|segmentdef|segmentout|zp)\\b"
				}
			]
		},
		"kick-directives-data": {
			"patterns": [
				{
					"name": "keyword.instructions",
					"match": "\\.(?i)[\\s]*\\b(by|byte|const|dw|dword|enum|fill|fillword|struct|var|wo|word)\\b"
				}
			]
		},
		"kick-directives-text": {
			"patterns": [
				{
					"name": "keyword.instructions",
					"match": "\\.(?i)[\\s]*\\b(te|text|)\\b"
				}
			]
		},

		"llvm": {
			"patterns": [
				{
					"name": "keyword.instructions",
					"match": "\\.(?i)[\\s]*\\b(endm)\\b"
				}
			]
		}

	},
	"scopeName": "source.asm"
}
